volumes:
  bills_volume:

networks:
  backend:

services:
#  producer:
#    build: ./producer
#    volumes:
#      - bills_volume:/var/log
#    networks:
#      - backend
#    command: [ "/bin/sh", "-c", "/app/producer > /var/log/producer.log" ]
#
#
#  consumer:
#    build: ./consumer

  kafka:
      image: wurstmeister/kafka:2.12-2.2.0
      ports:
          - "9092:9092"
      environment:
          KAFKA_ADVERTISED_HOST_NAME: localhost
          KAFKA_CREATE_TOPICS: "bills:1:1"
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      depends_on:
          - zookeeper
      networks:
          - backend

  zookeeper:
      image: wurstmeister/zookeeper
      networks:
          - backend
      ports:
          - "2181:2181"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
        - "8081:8080"
    environment:
        KAFKA_CLUSTERS_0_NAME: local
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: PLAINTEXT://kafka:9092
        KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

    depends_on:
        - kafka
    networks:
        - backend

  s3:
    image: minio/minio
    command: minio server /data
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    ports:
      - "9000:9000"
    volumes:
      - ./data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3